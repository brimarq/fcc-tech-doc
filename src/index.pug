- var topics = ["Introduction", "Initial Setup", "JS Loader", "Pug Loader", "CSS Loader"];

mixin nav-list(topics)
  ul.nav-list: each topic in topics
    li.nav-list-item: a.nav-link(href=`#${topic.split(" ").join("_").toLowerCase()}`) #{topic}

mixin main-section(topic)
  section.main-section(id=`${topic.split(" ").join("_").toLowerCase()}`)
    header.section-header
      h2= topic
    if block
      block
    else
      p --[ INSERT CONTENT HERE ]--

.container
  nav#navbar
    .nav-container
      input#hamburger-toggle(type="checkbox" autocomplete="off")
      header.nav-header
        //- .nav-header-left
        h1 navbar title
        //- .nav-header-right
        label(for="hamburger-toggle").hamburger
          span.hamburger-bar
          span.hamburger-bar
          span.hamburger-bar
       
      +nav-list(topics)

  main#main-doc
    +main-section(`${topics[0]}`)
      p Have you ever been working in a <a href="https://codepen.io/"> CodePen.io</a> pen and wished there was a way to work locally, in your own IDE, with the advantage of version control? This guide will show how to mimic a CodePen pen on your own computer using <a href="https://webpack.js.org/">Webpack</a> with its dev server and hot reloading. Of course, you'll still have to copy & paste your finished code into Codepen; but, this way, you can version your code in a git repository as you work.  
      p Here, we will simulate a pen with this configuration: 
      ul
        li Pug
        li PostCSS
        li JS + Babel
        li Normalize
        li Autoprefixer 

      p NOTE: We will be setting up a basic Webpack configuration, but all of the nitty-gritty, dirty details of doing so is beyond the scope of this guide.
      

    +main-section(`${topics[1]}`)
      p Choose a directory on your computer and create the following directory/file structure:  
      pre: code.language-bash. 
        my-local-pen 
        ├── webpack.config.js
        └── src
            ├── index.js
            ├── index.pug
            ├── style.css
            └── script.js
      
      p Next, from your terminal, <code>cd</code> into the project directory and initialize the project: 
      pre: code.language-bash. 
        npm init -y 

      p And, in the resulting <code>package.json</code> file, swap the "test" script for the following "start" script so that you can run <code>npm start</code> from your terminal to start the dev server after it is setup. 
      pre: code.language-diff-json.diff-highlight.
        {
          "name": "my-local-pen",
          "version": "1.0.0",
          "description": "",
          "main": "webpack.config.js",
          "scripts": {
        -    "test": "echo \"Error: no test specified\" && exit 1"
        +    "start": "webpack-dev-server --mode development"
          },
          "keywords": [],
          "author": "",
          "license": "ISC"
        }

      p Once that's done, install the following packages as dev dependencies: 
      pre: code.language-bash. 
        npm i -D webpack webpack-cli webpack-dev-server

      p Next, setup an initial webpack configuration. Here, we will set <code>src/index.js</code> as the entry point and use the devServer with hot module reloading so that any changes made to code in development will be reflected immediately in the browser without having to refresh the page.  
      pre: code.language-javascript. 
        // webpack.config.js
        module.exports = {
          mode: 'development',
          entry: './src/index.js',
          output: {
            filename: '[name].bundle.js',
          },
          devServer: { 
            port: 3000,
            contentBase: './dist',
            hot: true,
            inline: true
          }
        };

    +main-section(`${topics[2]}`)
      p Since <code>src/index.js</code> is the entry point for webpack, we will now configure the loader to process javascript files with Babel. 

      p First, install the necessary packages for the babel loader: 
      pre: code.language-bash. 
        npm i -D @babel/core @babel/preset-env babel-loader  

      pre: code.language-javascript. 
        // webpack.config.js
        module.exports = {
          // ...
          module: {
            rules: [
              {
                test: /\.js$/,
                exclude: /node_modules/,
                use: {
                  loader: "babel-loader",
                  options: {
                    presets: [
                      [
                        '@babel/preset-env', 
                        { modules: false }
                      ]
                    ],
                  }
                }
              },
            ]
          },
        };
      
      p Nulla quis metus eu turpis pellentesque sagittis. Proin scelerisque at ante in porttitor. Fusce non ligula tempor, ullamcorper urna hendrerit, condimentum lectus. Nulla mi nulla, hendrerit vitae dui eu, fringilla molestie enim. Aliquam egestas nisi vel enim consequat feugiat. Praesent laoreet molestie lobortis. Aliquam ac felis pharetra, eleifend ante quis, fermentum mi. Fusce fringilla lacinia ex, sed sagittis magna mattis vel. Aliquam porttitor lorem gravida massa consequat elementum sit amet eu mauris. Ut id posuere nulla, et tincidunt mi. Suspendisse tempor vulputate mauris a auctor. Praesent vitae eros quis libero molestie tincidunt fermentum at ante.
      
      ul 
        li Donec sagittis metus mollis, porttitor mi id, sagittis odio.
        li Pellentesque ultricies lectus vitae libero interdum, et tincidunt diam sagittis.

    +main-section(`${topics[3]}`)
      p Normally, when using Pug, you would create a Pug template, but with this plugin, the template is in html. For this reason, we will create a root div inside of body, to target for the injected pug content. This way, any script tags added to the end of body will be unaffected.

      p First, install the necessary packages for the pug loader: 
      pre: code.language-bash. 
        npm i -D pug pug-loader mini-html-webpack-plugin @vxna/mini-html-webpack-template   

      pre: code.language-javascript. 
        // webpack.config.js
        const path = require('path');

        module.exports = {
          // ...
          module: {
            rules: [
              { /* babel loader */ },
              {
                test: /\.pug$/,
                include: path.resolve(__dirname, 'src'),
                use: ['pug-loader']
              },
            ]
          },
        };
      
      p Nulla sit amet dictum ex. Sed nec semper felis. Cras molestie eget justo at congue. Integer consequat, ligula sagittis tincidunt convallis, nisl eros finibus urna, a maximus orci leo et tellus. Pellentesque sit amet magna nulla. Etiam non auctor ante. In mauris tortor, volutpat vel dolor a, sagittis rutrum risus. Nulla ac vehicula ante, et commodo velit. Vivamus vel faucibus justo. Maecenas sodales mauris quis enim ultricies convallis.
      
      pre: code.language-javascript. 
        console.log("Hello, world!");
        console.log("Hello, world!");

    +main-section(`${topics[4]}`)
      p Phasellus pretium enim id laoreet laoreet. Donec a semper lacus, nec aliquet ligula.

      p First, install the necessary packages for the css loader: 
      pre: code.language-bash. 
        npm i -D style-loader css-loader postcss-loader postcss-use postcss-simple-vars postcss-nested autoprefixer normalize.css      

      pre: code.language-javascript. 
        // webpack.config.js
        const path = require('path');

        module.exports = {
          // ...
          module: {
            rules: [
              { /* babel loader */ },
              {
                test: /\.pug$/,
                include: path.resolve(__dirname, 'src'),
                use: ['pug-loader']
              },
              {
                test: /\.css$/,
                use: [
                  'style-loader', 
                  { 
                    loader: 'css-loader', 
                    options: { importLoaders: 1 } 
                  }, 
                  {
                    loader: 'postcss-loader',
                    options: {
                      ident: 'postcss',
                      plugins: () => [
                        require('postcss-use')({ modules: codePenPostCssUseModules }),
                        require('autoprefixer')()
                      ]
                    }
                  }
                ]
              }
            ]
          },
        };
    
      p Suspendisse volutpat non mi pulvinar pretium. Integer in orci sodales, bibendum sapien id, commodo libero. Suspendisse interdum enim ut neque porttitor, nec bibendum odio tincidunt. Sed et nibh eu tellus consectetur luctus sit amet ac dolor. In blandit, mi in convallis tristique, metus sapien rhoncus mauris, sed dictum ipsum orci eu velit. Nunc posuere ac magna sed elementum. Cras elementum, nibh eu posuere bibendum, lorem lacus lacinia est, non mollis elit magna sit amet risus. Morbi condimentum justo a eros sollicitudin auctor. Vestibulum id rhoncus est. Etiam a accumsan libero.
      
      pre: code.language-javascript. 
        console.log("Hello, world!");
        console.log("Hello, world!");
      
      ul 
        li Vestibulum posuere mauris quis luctus sodales.

      pre: code.language-javascript. 
        // webpack.config.js
        const path = require('path');
        const MiniHtmlWebpackPlugin = require('mini-html-webpack-plugin');
        const codePenPostCssUseModules = [
          'lost',
          'postcss-apply',
          'postcss-color-function',
          'postcss-conditionals',
          'postcss-custom-media',
          'postcss-discard-comments',
          'postcss-each',
          'postcss-extend',
          'postcss-flexbox',
          'postcss-for',
          'postcss-media-minmax',
          'postcss-mixins',
          'postcss-nested',
          'postcss-nested-ancestors',
          'postcss-preset-env',
          'postcss-reverse-media',
          'postcss-simple-vars',
          'postcss-triangle'
        ];

        module.exports = {
          mode: 'development',
          entry: './src/index.js',
          output: {
            filename: '[name].bundle.js',
          },
          devServer: { 
            port: 3000,
            contentBase: './dist',
            hot: true,
            inline: true
          },
          module: {
            rules: [
              {
                test: /\.js$/,
                exclude: /node_modules/,
                use: {
                  loader: "babel-loader",
                  options: {
                    presets: [
                      ['@babel/preset-env', { modules: false }]
                    ]
                  }
                }
              },
              {
                test: /\.pug$/,
                include: path.resolve(__dirname, 'src'),
                use: ['pug-loader']
              },
              {
                test: /\.css$/,
                use: [
                  'style-loader', 
                  { loader: 'css-loader', options: { importLoaders: 1 } }, 
                  {
                    loader: 'postcss-loader',
                    options: {
                      ident: 'postcss',
                      plugins: () => [
                        require('postcss-use')({ modules: codePenPostCssUseModules }),
                        require('autoprefixer')()
                      ]
                    }
                  }
                ]
              }
            ]
          },
          plugins: [
            new MiniHtmlWebpackPlugin({
              context: {
                lang: 'en',
                title: 'My Local CodePen',
                container: 'root',
                trimWhitespace: true
              },
              template: require('@vxna/mini-html-webpack-template')
            })
          ]
        };



  


  

 


